<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm -->
<HTML><HEAD><TITLE>Семинары 3-4</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<META content="MSHTML 6.00.2900.3020" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<P align=center><B><FONT face="Times New Roman" size=6>Семинары 3-4. Процессы в 
операционной системе UNIX.</FONT></B></P>
<P align=center>(Основываются на <A 
href="http://cs.mipt.ru/docs/courses/osstud/02/l2.htm">лекции 2</A>) </P>
<P align=center><A 
href="http://cs.mipt.ru/docs/courses/osstud/01/prep/sem1-2.htm">Предыдущий 
семинар</A> | <A href="http://cs.mipt.ru/docs/courses/osstud/os.html">Программа 
курса</A> | <A 
href="http://cs.mipt.ru/docs/courses/osstud/05/prep/sem5.htm">Следующий 
семинар</A></P>
<P align=center><B><FONT face="Times New Roman, Times, serif" size=4>Программа 
семинаров</FONT></B></P>
<OL>
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0301">Понятие 
  процесса в UNIX, его контекст.</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0302">Идентификация 
  процесса.</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0303">Состояния 
  процесса. Краткая диаграмма состояний.</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0304">Иерархия 
  процессов.</A> </FONT>
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0305">Системные 
  вызовы getpid(), getppid().</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0307">Создание 
  процесса в UNIX. Системный вызов fork().&nbsp;</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0310">Завершение 
  процесса. Функция exit().</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0311">Параметры 
  функции main() в языке С. Переменные среды и аргументы командной 
  строки.</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0313">Изменение 
  пользовательского контекста процесса. Семейство функций для системного вызова 
  exec().</A></FONT> </LI></OL>
<P align=center><FONT face="Times New Roman, Times, serif" size=3><B><FONT 
size=4>Цели занятия</FONT></B></FONT></P>
<OL>
  <LI><FONT face="Times New Roman, Times, serif" size=3>Дать понятие об иерархии 
  процессов в UNIX.</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3>Дать понятие о 
  содержании контекста процесса в UNIX.</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3>Научить создавать новый 
  процесс.</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3>Научить запускать новую 
  программу.</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3>Дать понятие об 
  использовании переменных среды и аргументов командной строки.</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3>Студент должен осознать 
  разницу между системными вызовами fork() и exec().</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3>Студент должен понять, 
  как завершается программа, написанная на C, даже если она не вызывает явно 
  функцию exit()</FONT> </LI></OL>
<P align=center><FONT face="Times New Roman, Times, serif" size=3><B><FONT 
size=4>Практические работы</FONT></B></FONT></P>
<OL>
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0306">Написание, 
  компиляция и запуск программы с системными вызовами getpid() и getppid().</A> 
  </FONT>
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0308">Прогон 
  программы с использованием вызова fork(), где порожденный процесс делает то же 
  самое, что и родитель.</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0309">Написание, 
  компиляция и запуск программы с использованием вызова fork()</A></FONT><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0309"><FONT 
  face="Times New Roman, Times, serif" size=3> с разным поведением процессов 
  ребенка и родителя.</FONT></A> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0312">Написание, 
  компиляция и запуск программы с распечаткой значений переменных среды и 
  аргументов командной строки</A>.</FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0314">Прогон 
  программы с использованием системного вызова exec().</A></FONT> 
  <LI><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0315">Написание, 
  компиляция и запуск программы для изменения пользовательского контекста в 
  порожденном процессе.</A></FONT> </LI></OL>
<P align=center><B><FONT face="Times New Roman, Times, serif" size=4>План 
занятия</FONT></B></P>
<OL>
  <LI>
  <P align=justify><FONT color=#ff0000><B><A name=s0301></A>Понятие процесса в 
  UNIX. Его контекст.<BR></B></FONT><BR><FONT 
  face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l0201"><IMG 
  alt="Понятие процесса в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=5 
  border=0> </A>Все построение операционной системы UNIX основано на 
  использовании концепции процессов, которая&nbsp; обсуждалась на лекции. 
  Контекст процесса складывается из пользовательского контекста и контекста 
  ядра, как изображено на рисунке:<BR>
  <P align=center><IMG src="ОС-ЛР1-Информация(КарповКоньков)_files/s3-1.gif" 
  align=absMiddle border=0></P>
  <P align=justify>Под пользовательским контекстом процесса понимают код и 
  данные, расположенные в адресном пространстве процесса. Все данные 
  подразделяются на инициализируемые неизменяемые данные (например, константы), 
  инициализируемые изменяемые данные (все переменные, начальные значения которых 
  присваиваются на этапе компиляции), неинициализируемые изменяемые данные (все 
  статические переменные, которым не присвоены начальные значения на этапе 
  компиляции), стек пользователя и данные, расположенные в динамически 
  выделяемой памяти (например, с помощью стандартных библиотечных C функций 
  malloc, calloc и realloc). Исполняемый код и инициализируемые данные 
  составляют содержимое&nbsp; файла программы, который исполняется в контексте 
  процесса. Пользовательский стек используется при работе процесса в 
  пользовательском режиме (user-mode).<BR><BR><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020302"><IMG 
  alt="Понятие контекста процесса и PCB в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=1 
  border=0></A> Под понятием контекст ядра объединяются системный контекст и 
  регистровый контекст, рассмотренные на лекции. Мы будем выделять в контексте 
  ядра стек ядра, который используется при работе процесса в режиме ядра 
  &nbsp;(kernel mode), и данные ядра, хранящиеся в структурах, являющихся 
  аналогом блока управления процессом - PCB. Состав данных ядра будет уточняться 
  на последующих семинарах. На этом занятии нам достаточно знать, что в данные 
  ядра входят: идентификатор пользователя - UID, групповой идентификатор 
  пользователя - GID, идентификатор процесса - PID, идентификатор родительского 
  процесса - PPID.<BR>&nbsp; </FONT></P>
  <LI>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><FONT 
  color=#ff0000><B><A name=s0302></A>Идентификация 
  процесса.</B></FONT><BR><BR></FONT><FONT face="Times New Roman" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020303a"><IMG 
  alt="PID в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=1 
  border=0></A>Каждый</FONT><FONT face="Times New Roman" size=3><FONT 
  face="Times New Roman, Times, serif" size=3> процесс </FONT></FONT><FONT 
  face="Times New Roman" size=3>в операционной системе </FONT><FONT 
  face="Times New Roman, Times, serif" size=3><FONT face="Times New Roman" 
  size=3>получает свой собственный уникальный идентификационный 
  номер</FONT></FONT><FONT face="Times New Roman, Times, serif" size=3> PID 
  (Process IDentificator)</FONT><FONT face="Times New Roman, Times, serif" 
  size=3><FONT face="Times New Roman" size=3>.</FONT> При создании нового 
  процесса операционная система пытается присвоить ему&nbsp; свободный номер 
  больший, чем у процесса, созданного перед ним. Если таких свободных номеров не 
  оказывается (например, мы достигли максимально возможного номера для 
  процесса), то операционная система выбирает минимальный из всех свободных 
  номеров. В операционной системе Linux присвоение идентификационных номеров 
  процессов начинается с номера 0, который получает процесс <I>kernel </I>при 
  старте операционной системы. Максимально возможное значение для номера 
  процесса в Linux на базе процессоров Intel составляет 2<SUP>31</SUP>-1. 
  <BR>&nbsp;</FONT> </P>
  <LI>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><A 
  name=s0303></A><FONT color=#ff0000><B>Состояния процесса. Краткая диаграмма 
  состояний.</B></FONT><BR><BR><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l0202"><IMG 
  alt="Состояния процессов в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=1 
  border=0></A> Модель&nbsp;состояний процессов в операционной системе UNIX 
  представляет собой детализацию <A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/images/sr2-3.gif">модели 
  состояний, принятой в лекционном курсе</A>.</FONT> <FONT 
  face="Times New Roman, Times, serif" size=3>Краткая диаграмма состояний 
  процессов в операционной системе UNIX изображена на рисунке: 
  <P align=center><IMG src="ОС-ЛР1-Информация(КарповКоньков)_files/s3-2.gif" 
  border=0></P>
  <P align=justify>Как видим, состояние процесса <B><I>исполнение 
  </I></B>расщепилось на 2 состояния: <B><I>исполнение в режиме ядра</I></B> и 
  <B><I>исполнение в режиме пользователя</I></B>. В состоянии <B><I>исполнение в 
  режиме пользователя</I></B> процесс выполняет прикладные инструкции 
  пользователя. В состоянии&nbsp; <B><I>исполнение в режиме ядра</I></B> 
  выполняются инструкции ядра операционной системы в контексте текущего процесса 
  (например, при обработке системного вызова или прерывания). Из состояния<B><I> 
  исполнение в режиме пользователя </I></B>процесс не может непосредственно 
  перейти в состояния <B><I>ожидание</I></B>, <B><I>готовность</I></B> и 
  <B><I>закончил исполнение</I></B>. Такие переходы возможны только через 
  промежуточное состояние <B><I>исполняется в режиме ядра</I></B>. Точно также 
  запрещен прямой переход из состояния<B><I> готовность</I></B> в состояние 
  <B><I>исполнение в</I></B> <B><I>режиме 
  пользователя</I></B>.<BR><BR>Приведенная выше диаграмма состояний процессов в 
  Linux не является полной. Она показывает только состояния, для понимания 
  которых достаточно уже полученных знаний. Полную диаграмму состояний процессов 
  в операционной системе UNIX можно найти в книге Баха "Архитектура операционной 
  системы UNIX" (рисунок 6.1.).<BR>&nbsp; </FONT></P>
  <LI>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><A 
  name=s0304></A><FONT color=#ff0000><B>Иерархия процессов.</B></FONT><BR><BR><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020303"><IMG 
  alt="Иерархия процессов в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=1 
  border=0></A> &nbsp;В операционной системе UNIX все процессы кроме одного, 
  создающегося при старте операционной системы, могут быть порождены только 
  какими-либо другими процессами.&nbsp;В качестве&nbsp; процесса прародителя 
  всех остальных процессов в разных UNIX-ообразных системах могут выступать 
  процессы с номерами 1 или 0.&nbsp; В операционной системе Linux таким 
  родоначальником, существующим только при загрузке,&nbsp; является процесс 
  <I>kernel </I>с идентификатором 0.&nbsp;<BR><BR>Таким образом, все процессы в 
  UNIX связаны отношениями процесс-родитель - процесс-ребенок, образуя 
  генеалогическое дерево процессов. <A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020303c"><IMG 
  alt="Завершение процессов в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=1 
  border=0></A>Для сохранения целостности генеалогического дерева в ситуациях, 
  когда процесс-родитель завершает свою работу до завершения выполнения 
  процесса-ребенка, идентификатор родительского процесса в данных ядра 
  процесса-ребенка (PPID - Parent Process IDentificator) изменяет свое значение 
  на значение 1, соответствующее идентификатору процесса <I>init</I>, время 
  жизни которого определяет время функционирования операционной системы. Тем 
  самым процесс init как бы усыновляет осиротевшие процессы. Наверное, логичнее 
  было бы изменять PPID не на значение 1, а на значение идентификатора 
  ближайшего существующего процесса-прародителя умершего процесса-родителя, но в 
  UNIX почему-то такая схема реализована не была.<BR>&nbsp; </FONT></P>
  <LI>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><A 
  name=s0305></A><FONT color=#ff0000><B>Системные вызовы getppid() и 
  getpid().</B></FONT><BR><BR>Данные ядра, находящиеся в контексте ядра 
  процесса, не могут быть прочитаны процессом непосредственно. Для получения 
  информации о них процесс должен совершить соответствующий системный вызов. 
  Значение идентификатора текущего процесса может быть получено с помощью 
  системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/getpid.htm">getpid()</A>, а 
  значение идентификатора родительского процесса для текущего процесса - с 
  помощью системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/getpid.htm">getppid()</A>.&nbsp;<BR>&nbsp;</FONT> 
  </P>
  <LI>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><A 
  name=s0306></A><FONT color=#ff0000><B>Написание программы с использованием 
  getpid() и getppid().</B></FONT> <BR><BR>В качестве примера на использование 
  системных вызовов <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/getpid.htm">getpid() и 
  getppid()</A> студентам предлагается самостоятельно написать программу, 
  печатающую значения PID и PPID для текущего процесса.&nbsp;<BR>&nbsp;</FONT> 
  </P>
  <LI>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><FONT 
  color=#ff0000><A name=s0307></A><B>Создание процесса в UNIX. Системный вызов 
  fork().</B> <BR></FONT><BR><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020303a"><IMG 
  alt="Создание процесса в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" align=right vspace=1 
  border=0></A>В операционной системе UNIX новый процесс может быть порожден 
  единственным способом - с помощью системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A>. При этом 
  вновь созданный процесс будет являться практически полной копией родительского 
  процесса.&nbsp;</FONT> <FONT face="Times New Roman">У порожденного процесса по 
  сравнению с родительским процессом (на уровне уже полученных знаний) 
  изменяются значения следующих параметров:<BR>&nbsp; </FONT>
  <UL type=disc>
    <DIR>
    <LI><FONT face="Times New Roman, Times, serif">идентификатор процесса - 
    PID;</FONT> 
    <LI><FONT face="Times New Roman, Times, serif">идентификатор родительского 
    процесса - PPID;</FONT> </LI></DIR></UL>
  <P align=justify><FONT face="Times New Roman, Times, serif" 
  size=3><BR>Дополнительно к ним может измениться поведение порожденного 
  процесса по отношению к некоторым сигналам, о чем подробнее будет рассказано 
  на <A 
  href="http://cs.mipt.ru/docs/courses/osstud/13/prep/sem13-14.htm">семинарах 
  13-14</A>, когда мы будем говорить о сигналах в операционной системе 
  UNIX.</FONT> 
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3>В процессе 
  выполнения системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A> 
  порождается копия родительского процесса и возвращение из системного вызова 
  будет происходить уже как в родительском, так и в порожденном процессах. Этот 
  системный вызов является единственным, который вызывается один раз, а при 
  успешной работе возвращается два раза (один раз в процессе-родителе и один раз 
  в процессе-ребенке)! После выхода из системного вызова оба процесса продолжают 
  выполнение регулярного пользовательского кода, следующего за системным 
  вызовом.</FONT><BR>&nbsp; </P>
  <LI><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><B><A 
  name=s0308></A>Прогон программы с fork() с одинаковой работой родителя и 
  ребенка. <BR></B></FONT><BR><FONT face="Times New Roman, Times, serif" 
  size=3>Для иллюстрации вышесказанного давайте рассмотрим <A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/stud/03-1c.htm">программу</A>, 
  находящуюся в файле /ftp/pub/sem3-4/stud/03-1.c, откомпилируем ее и запустим 
  на исполнение.&nbsp;<BR>&nbsp;</FONT> 
  <LI>
  <P align=justify><B><FONT face="Times New Roman, Times, serif" color=#ff0000 
  size=3>Системный вызов fork() (продолжение).<BR><BR></FONT></B><FONT 
  face="Times New Roman, Times, serif" size=3>Для того, чтобы после возвращения 
  из системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A> процессы 
  могли определить, кто из них является ребенком, а кто родителем, и, 
  соответственно, по-разному организовать свое поведение, он возвращает в них 
  разные значения. При успешном создании нового процесса в процесс-родитель 
  возвращается положительное значение равное идентификатору процесса-ребенка. В 
  процесс-ребенок же возвращается значение 0. Если по какой-либо причине создать 
  новый процесс не удалось, то системный вызов вернет в инициировавший его 
  процесс значение -1. Таким образом, общая схема организации различной работы 
  процесса-ребенка и процесса-родителя выглядит так:<BR><BR></FONT><FONT 
  face="Times New Roman, Times, serif" size=3>
  <DIR><I><FONT color=#008000><B>pid = <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A>;<BR>if(pid 
  == -1){<BR></B></FONT></I>
  <DIR><I><FONT color=#008000><B>...<BR>/* ошибка 
  */<BR>...<BR></B></FONT></I></DIR><I><FONT color=#008000><B>} else if (pid == 
  0){<BR></B></FONT></I>
  <DIR><I><FONT color=#008000><B>...<BR>/* ребенок 
  */<BR>...<BR></B></FONT></I></DIR><I><FONT color=#008000><B>} else 
  {<BR></B></FONT></I>
  <DIR><I><FONT color=#008000><B>...<BR>/* родитель 
  */<BR>...<BR></B></FONT></I></DIR><I><FONT 
  color=#008000><B>}</B></FONT></I></DIR></FONT><BR>&nbsp; 
  <LI><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><B><A 
  name=s0309></A>Написание, компиляция и запуск программы с использованием 
  вызова fork() с разным поведением процессов ребенка и 
  родителя.</B></FONT><FONT face="Times New Roman, Times, serif" 
  size=3><BR><BR></FONT><FONT face="Times New Roman, Times, serif" 
  size=3>Изменить предыдущую <A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/stud/03-1c.htm">программу</A> с 
  <A href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A> так, 
  чтобы родитель и ребенок совершали разные действия (какие не важно).<BR>&nbsp; 
  </FONT>
  <LI><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><B><A 
  name=s0310></A>Завершение процесса. Функция exit(). </B></FONT>
  <P align=justify><FONT face="Times New Roman">Существует два способа 
  корректного завершения процесса в программах, написанных на языке C. Первый 
  способ мы использовали до сих пор: процесс корректно завершался по достижении 
  конца функции <B><FONT color=#008000>main() </FONT></B>или при выполнении 
  оператора <B><FONT color=#008000>return </FONT></B>в функции <FONT 
  color=#008000><B>main()</B></FONT>, второй способ применяется при 
  необходимости завершить процесс в каком-либо другом месте программы. Для этого 
  применяется функция <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exit.htm">exit()</A> из 
  стандартной библиотеки функций для языка C. При выполнении этой функции 
  происходит сброс всех частично заполненных буферов ввода-вывода с закрытием 
  соответствующих потоков, после чего инициируется системный вызов прекращения 
  работы процесса и перевода его в состояние <I><B>закончил 
  исполнение</B></I>.</FONT> 
  <P align=justify><FONT face="Times New Roman">Возврата из функции в текущий 
  процесс не происходит и функция ничего не возвращает. </FONT>
  <P align=justify><FONT face="Times New Roman">Значение параметра функции <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exit.htm">exit()</A> – кода 
  завершения процесса – передается ядру операционной системы и может быть затем 
  получено процессом, породившим завершившийся процесс.</FONT> <FONT 
  face="Times New Roman, Times, serif" size=3>На самом деле при достижении конца 
  функции main() также неявно вызывается эта функция со значением параметра 
  0.</FONT> 
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020303c"><IMG 
  height=34 alt="Завершение процессов в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" width=48 align=right 
  vspace=1 border=0></A>Если процесс завершает свою работу раньше, чем его 
  родитель, и родитель явно не указал, что он не хочет получать информацию о 
  статусе завершения порожденного процесса (об этом подробнее на <A 
  href="http://cs.mipt.ru/docs/courses/osstud/13/prep/sem13-14.htm#s1317">семинарах 
  13-14</A> при изучении сигналов), то завершившийся процесс не исчезает из 
  системы окончательно, а остается в состоянии <I><B>закончил исполнение</B></I> 
  либо до завершения процесса-родителя, либо до того момента, когда родитель 
  соблаговолит получить эту информацию. Процессы, находящиеся в состоянии 
  <I><B>закончил исполнение</B></I>, в операционной системе принято называть 
  процессами-зомби (zombie, defunct). <BR>&nbsp;<BR></FONT></P>
  <LI><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><B><A 
  name=s0311></A>Параметры функции main() в языке C. Переменные среды и 
  аргументы командной строки.</B></FONT><BR>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3>У функции 
  <FONT color=#008000><B><I>main()</I></B></FONT> в языке программирования C 
  существует три параметра, которые могут быть переданы ей операционной 
  системой. Полный прототип функции <FONT 
  color=#008000><B><I>main()</I></B></FONT> выглядит следующим 
  образом:<BR>&nbsp; <BR>
  <DIR><I><B><FONT color=#008000>int main(int argc, char *argv[], char *envp[]); 
  </FONT></B></I></DIR><BR>Первые два параметра при запуске программы на 
  исполнение командной строкой позволяют узнать полное содержание командной 
  строки. Вся командная строка рассматривается как набор слов, разделенных 
  пробелами. Через параметр <FONT color=#008000><B><I>argc</I></B></FONT> 
  передается количество слов в командной строке, которой была запущена 
  программа. Параметр <FONT color=#008000><B><I>argv</I></B></FONT> является 
  массивом указателей на отдельные слова. Так, например, если программа была 
  запущена командой&nbsp;<BR><BR>
  <DIR><B><FONT color=#008000>a.out 12 abcd<BR>&nbsp;<BR></FONT></B></DIR>то 
  значение параметра <FONT color=#008000><B><I>argc</I></B></FONT> будет равно 
  3, <FONT color=#008000><B><I>argv[0] </I></B></FONT>будет указывать на имя 
  программы - первое слово - "<FONT color=#008000><B>a.out</B></FONT>", <FONT 
  color=#008000><B><I>argv[1] </I></B></FONT>- на слово "<FONT 
  color=#008000><B>12</B></FONT>",&nbsp; <FONT 
  color=#008000><B><I>argv[2]</I></B></FONT> - на слово "<FONT 
  color=#008000><B>abcd</B></FONT>". Заметим, что, так как имя программы всегда 
  присутствует на первом месте в командной строке, то <FONT 
  color=#008000><B><I>argc</I></B></FONT> всегда больше 0, а <FONT 
  color=#008000><B><I>argv[0]</I></B></FONT> всегда указывает на имя запущенной 
  программы.<BR><FONT color=#008000><B><BR></B></FONT></FONT><FONT 
  face="Times New Roman, Times, serif" size=3>Анализируя в программе содержимое 
  командной строки, мы можем предусмотреть ее различное поведение в зависимости 
  от слов следующих за именем программы. Таким образом, не внося изменений в 
  текст программы, мы можем заставить ее работать по-разному от запуска к 
  запуску. Например компилятор <FONT color=#008000><B>gcc</B></FONT>, вызванный 
  командой <FONT color=#008000><B>gcc 1.c</B></FONT> будет генерировать 
  исполняемый файл с именем <FONT color=#008000><B>a.out</B></FONT>, а при 
  вызове командой <FONT color=#008000><B>gcc 1.c -o 1.exe</B></FONT> - файл с 
  именем <FONT color=#008000><B>1.exe</B></FONT>.<BR><BR>Третий параметр - <FONT 
  color=#008000><B>envp</B></FONT> - является массивом указателей на&nbsp; 
  параметры окружающей среды процесса.&nbsp; Начальные параметры окружающей 
  среды процесса задаются в специальных конфигурационных файлах для каждого 
  пользователя и устанавливаются при входе пользователя в систему. В последующем 
  они могут быть изменены с помощью специальных команд операционной системы 
  UNIX. Каждый параметр имеет вид: <B><I>переменная=строка</I></B>. Такие 
  переменные используются для изменения долгосрочного поведения процессов, в 
  отличие от аргументов командной строки. Например, задание параметра<FONT 
  color=#008000><B> TERM=vt100</B></FONT> может говорить процессам, 
  осуществляющим вывод на экран дисплея, что работать им придется с терминалом 
  vt100. Меняя значение переменной среды <FONT color=#008000><B>TERM</B></FONT>, 
  например на <FONT color=#008000><B>TERM=console</B></FONT>, мы говорим таким 
  процессам, что они должны изменить свое поведение на вывод для системной 
  консоли.<FONT face="Times New Roman, Times, serif" size=3><B><FONT 
  color=#008000><BR><BR></FONT></B>Размер массива аргументов командной строки в 
  функции <B><I><FONT color=#008000>main()</FONT></I></B> мы получали в качестве 
  ее параметра. Так как для массива ссылок на параметры окружающей среды такого 
  параметра нет, то его размер определяется другим способом. Последний элемент 
  этого массива содержит указатель <B><I><FONT 
  color=#008000>NULL</FONT></I></B>. <BR>&nbsp; <BR></FONT></FONT>
  <LI><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><B><A 
  name=s0312></A>Написание, компиляция и запуск программы, распечатывающей 
  аргументы командной строки и параметры среды.</B></FONT><FONT 
  face="Times New Roman, Times, serif" size=3><BR><BR></FONT><FONT 
  face="Times New Roman, Times, serif" size=3>В качестве примера студентам 
  предлагается самостоятельно написать программу, распечатывающую значения 
  аргументов командной строки и параметров окружающей среды для текущего 
  процесса.<BR>&nbsp;<BR></FONT>
  <LI>
  <P align=justify><A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/03-3pc.htm"><FONT 
  face="Times New Roman, Times, serif" size=3><FONT color=#ff0000><B><A 
  name=s0313></A>Изменение пользовательского контекста процесса. Семейство 
  функций для системного вызова exec().<BR></B></FONT><BR></FONT></A><FONT 
  face="Times New Roman, Times, serif" size=3><A 
  href="http://cs.mipt.ru/docs/courses/osstud/02/ch2.htm#l020303b"><IMG 
  height=34 alt="Создание процесса в лекции" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/bookopen.gif" width=48 align=right 
  vspace=1 border=0></A>Для изменения пользовательского контекста процесса 
  используется системный вызов <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A>, который 
  пользователь не может вызвать непосредственно. Вызов <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A> 
  заменяет&nbsp; пользовательский контекст текущего процесса на содержимое 
  некоторого исполняемого файла и&nbsp; устанавливает начальные значения 
  регистров процессора (в том числе устанавливает программный счетчик на начало 
  загружаемой программы). Этот вызов требует для своей работы задания имени 
  исполняемого файла, аргументов командной строки и параметров окружающей среды. 
  Для осуществления вызова программист может воспользоваться одной из 6 функций: 
  <A href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">execlp(), 
  execvp(), execl(), execv(), execle(), execve()</A>, отличающихся друг от друга 
  представлением параметров, необходимых для работы системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A>. 
  Взаимосвязь указанных выше функций изображена на рисунке. <BR>
  <P align=center><IMG height=245 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/s3-3.gif" width=670 border=0> <BR>
  <P align=justify>Поскольку системный контекст процесса при вызове <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A> остается 
  практически неизменным, то большинство атрибутов процесса, доступных 
  пользователю через системные вызовы (PID, UID, GID, PPID и другие, смысл 
  которых будет становиться понятным по мере углубления наших знаний на 
  дальнейших занятиях), также не изменяется после запуска новой 
  программы<BR><BR><IMG alt="Nota bene" hspace=10 
  src="ОС-ЛР1-Информация(КарповКоньков)_files/znak.gif" align=left vspace=8 
  border=0>Важно понимать разницу между системными вызовами <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A> и <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A> Системный 
  вызов <A href="http://cs.mipt.ru/docs/courses/osstud/man/fork.htm">fork()</A> 
  создает новый процесс, у которого пользовательский контекст совпадает с 
  пользовательским контекстом процесса-родителя. Системный вызов <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A> 
  изменяет&nbsp; пользовательский контекст текущего процесса, не создавая новый 
  процесс.&nbsp;<BR><BR></FONT></P>
  <LI><B><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><A 
  name=s0314></A>Прогон программы с использованием системного вызова 
  exec().<BR><BR></FONT></B>
  <P align=justify><FONT face="Times New Roman, Times, serif" size=3>Для 
  иллюстрации использования системного вызова <A 
  href="http://cs.mipt.ru/docs/courses/osstud/man/exec.htm">exec()</A> давайте 
  рассмотрим <A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/stud/03-2c.htm">программу</A> в 
  файле /ftp/pub/sem3-4/stud/03-2.c, откомпилируем ее и запустим на 
  исполнение.&nbsp;Поскольку в результате должно распечататься содержимое файла 
  с именем 03-2.c, такой файл при запуске должен присутствовать в текущей 
  директории.<BR>&nbsp;<BR></FONT></P>
  <LI><FONT face="Times New Roman, Times, serif" color=#ff0000 size=3><B><A 
  name=s0315></A>Написание, компиляция и запуск программы для изменения 
  пользовательского контекста в порожденном процессе.<BR><BR></B></FONT><FONT 
  face="Times New Roman, Times, serif" size=3>Для закрепления полученных знаний 
  модифицируйте программу из <A 
  href="http://cs.mipt.ru/docs/courses/osstud/03/prep/sem3-4.htm#s0309">пункта 
  10</A> так, чтобы порожденный процесс запускал на исполнение новую программу. 
  <BR></FONT></LI></OL>
<P align=center><A 
href="http://cs.mipt.ru/docs/courses/osstud/01/prep/sem1-2.htm">Предыдущий 
семинар</A> | <A href="http://cs.mipt.ru/docs/courses/osstud/os.html">Программа 
курса</A> | <A 
href="http://cs.mipt.ru/docs/courses/osstud/05/prep/sem5.htm">Следующий 
семинар</A></P></BODY></HTML>
